<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quarks project â€“ Features</title>
    <link>https://quarks.suse.dev/docs/features/</link>
    <description>Recent content in Features on Quarks project</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://quarks.suse.dev/docs/features/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: BOSH Variables</title>
      <link>https://quarks.suse.dev/docs/features/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/variables/</guid>
      <description>
        
        
        

&lt;p&gt;BOSH releases consume two types of variables, explicit and implicit ones.&lt;/p&gt;

&lt;h3 id=&#34;implicit-variables&#34;&gt;Implicit Variables&lt;/h3&gt;

&lt;p&gt;Implicit variables have to be created before creating a BOSH deployment resource.
The &lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-operator/blob/master/docs/examples/bosh-deployment/boshdeployment-with-custom-variable.yaml&#34; target=&#34;_blank&#34;&gt;example&lt;/a&gt; creates a secret named &lt;code&gt;var-custom-password&lt;/code&gt;. That value will be used to fill &lt;code&gt;((custom-password))&lt;/code&gt; place holders in the BOSH manifest.&lt;/p&gt;

&lt;p&gt;The name of the secret has to follow this scheme: &amp;lsquo;var-&lt;variable-name&gt;&amp;lsquo;&lt;/p&gt;

&lt;p&gt;Missing implicit variables are treated as an error.&lt;/p&gt;

&lt;h3 id=&#34;explicit-variables&#34;&gt;Explicit Variables&lt;/h3&gt;

&lt;p&gt;Explicit variables are explicitly defined in the &lt;a href=&#34;https://bosh.io/docs/manifest-v2/#variables&#34; target=&#34;_blank&#34;&gt;BOSH manifest&lt;/a&gt;. They are generated automatically upon deployment and stored in secrets.&lt;/p&gt;

&lt;p&gt;The naming scheme is the same as for implicit variables.&lt;/p&gt;

&lt;p&gt;If an explicit variable secret already exists, it will not be generated. This allows users to set their own passwords, etc.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Desired Manifests</title>
      <link>https://quarks.suse.dev/docs/features/desired_manifests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/desired_manifests/</guid>
      <description>
        
        
        &lt;p&gt;A desired manifest is a BOSH deployment manifest that has already been calculated so that it&amp;rsquo;s the actual final state that the user wishes his software to be in. All ops files have been applied, variables have been calculated and replaced. This manifest is persisted and versioned.&lt;/p&gt;

&lt;p&gt;Ops files are applied by the operator.
Variables are replaced by an &lt;code&gt;QuarksJob&lt;/code&gt; that runs the operator&amp;rsquo;s image. The &lt;code&gt;QuarksJob&lt;/code&gt; writes the manifest on stdout, which is persisted using a &lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-job/blob/master/docs/quarksjob.md#versioned-secrets&#34; target=&#34;_blank&#34;&gt;Versioned Secret&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each manifest version that goes live is immutable.
A manifest&amp;rsquo;s version is an integer that gets incremented.
The &lt;em&gt;current version&lt;/em&gt; of the manifest is the greatest version.&lt;/p&gt;

&lt;p&gt;These manifests are kept in secrets named using the following rule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&amp;lt;operator-namespace&amp;gt;/&amp;lt;deployment-name&amp;gt;.desired-manifest-v&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deployment-name&lt;/code&gt;: the name of deployment manifest&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: the version of manifest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each secret is also annotated and labeled with information such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the deployment name&lt;/li&gt;
&lt;li&gt;the secret kind&lt;/li&gt;
&lt;li&gt;its version&lt;/li&gt;
&lt;li&gt;a description of the &amp;ldquo;sources&amp;rdquo; used to render the manifest (e.g. the location of the CRD that generated it).&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Entanglements</title>
      <link>https://quarks.suse.dev/docs/features/entanglements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/entanglements/</guid>
      <description>
        
        
        

&lt;p&gt;Also known as &amp;ldquo;Quarks Links&amp;rdquo; - they provide a way to share/discover information between BOSH and Kube Native components.&lt;/p&gt;

&lt;h2 id=&#34;using-k8s-native-values-in-bosh-deployments-native-bosh&#34;&gt;Using k8s Native Values in BOSH Deployments (Native -&amp;gt; BOSH)&lt;/h2&gt;

&lt;p&gt;In this case, the native component is a provider, and the BOSH component is a consumer.&lt;/p&gt;

&lt;p&gt;We construct link information from the native resources like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BOSH Link&lt;/th&gt;
&lt;th&gt;Native&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;address&lt;/td&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;DNS address of a k8s &lt;em&gt;service&lt;/em&gt; annotated  &lt;code&gt;quarks.cloudfoundry.org/provides = LINK_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;azs&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;not supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;properties&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;properties retrieved from a &lt;em&gt;secret&lt;/em&gt; annotated &lt;code&gt;quarks.cloudfoundry.org/provides = LINK_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.name&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;name of &lt;em&gt;pod&lt;/em&gt; selected by the k8s &lt;em&gt;service&lt;/em&gt; that&amp;rsquo;s annotated &lt;code&gt;quarks.cloudfoundry.org/provides = LINK_NAME&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.id&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;&lt;em&gt;pod&lt;/em&gt; uid&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.index&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;set to a value 0-(pod replica count)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.az&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;not supported&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.address&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;ip of &lt;em&gt;pod&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;instances.bootstrap&lt;/td&gt;
&lt;td&gt;Pod&lt;/td&gt;
&lt;td&gt;set to true if index == 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;If multiple secrets or services are found with the same link information, the operator should error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;example-native-bosh&#34;&gt;Example (Native -&amp;gt; BOSH)&lt;/h3&gt;

&lt;p&gt;When a job consumes a link, it will have a section like this in the in its job spec (&lt;code&gt;job.MF&lt;/code&gt;), e.g. the nats release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;consumes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create the following k8s secret to fulfill the link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;secretlink&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;labels&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/deployment-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mydeployment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;annotations&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/provides&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;nats&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;nats&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;link&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;|
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;      nats.user: myuser&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;nats.password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;mysecret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this secret, the nats release can use &lt;code&gt;link(&amp;quot;nats&amp;quot;).p(&amp;quot;password&amp;quot;)&lt;/code&gt; in its eruby templates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-eruby&#34; data-lang=&#34;eruby&#34;&gt;&amp;#34;&amp;lt;%= p(&amp;#34;nats.password&amp;#34;) %&amp;gt;&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, if there is a matching k8s service, it will be used in the link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;labels&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/deployment-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mydeployment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;annotations&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/link-provider-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats-service&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;ports&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;port&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9099&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;protocol&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;targetPort&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9099&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;selector&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;app&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;mynats&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this service, I should be able to use &lt;code&gt;link(&amp;quot;nats&amp;quot;).address&lt;/code&gt;, and I should get a value of &lt;code&gt;nats-service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This service selects for &lt;code&gt;Pods&lt;/code&gt; that have the label &lt;code&gt;app: mynats&lt;/code&gt;. The &lt;code&gt;instances&lt;/code&gt; array should be populated using information from these pods.&lt;/p&gt;

&lt;p&gt;If the secret is changed, consumers of the link are automatically restarted.&lt;/p&gt;

&lt;p&gt;If the service is changed, or the list of pods selected by the service is changed, consumers of the link are automatically restarted.&lt;/p&gt;

&lt;h2 id=&#34;using-bosh-variables-in-k8s-pods-bosh-native&#34;&gt;Using BOSH Variables in k8s Pods (BOSH -&amp;gt; Native)&lt;/h2&gt;

&lt;p&gt;In this case, the BOSH component is a provider, and the native component is a consumer.
The native component is pod, which might belong to a deployment or statefulset.&lt;/p&gt;

&lt;p&gt;The operator creates link secrets for all providers in a BOSH deployment. Each secret contains a flattened map with the provided properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Secret&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;link-test-nats-nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;annotations&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/restart-on-update&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;labels&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/entanglement&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;link-test-nats-nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;data&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;nats.password&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;YXBwYXJlbnRseSwgeW91Cg==&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;nats.port&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;aGF2ZSB0b28K&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;nats.user&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;bXVjaCB0aW1lCg==&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a pod is annotated with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;quarks.cloudfoundry.org/deployment: foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarks.cloudfoundry.org/consumes: &#39;[{&amp;quot;name&amp;quot;:&amp;quot;nats&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;nats&amp;quot;}]&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The operator will mutate the pod to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mount the link secrets as &lt;code&gt;/quarks/link/DEPLOYMENT/&amp;lt;type&amp;gt;-&amp;lt;name&amp;gt;/&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add an environment variable for each key in the secret data mapping: &lt;code&gt;LINK_&amp;lt;key&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; are the respective link type and name. For example, the nats release uses &lt;code&gt;nats&lt;/code&gt; for both the name and the type of the link. The &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; describes the BOSH property, flattened (dot-style), for example &lt;code&gt;nats.password&lt;/code&gt;. The key name is modified to be upper case and without dots in the context of an environment variable, therefore &lt;code&gt;nats.password&lt;/code&gt; becomes &lt;code&gt;LINK_NATS_PASSWORD&lt;/code&gt; in the container.&lt;/p&gt;

&lt;p&gt;If link information changes, the operator will trigger an update (restart) of the deployment or statefulset owning the pod.
This can be done by updating the template of the pod using an annotation.&lt;/p&gt;

&lt;h3 id=&#34;example-bosh-native&#34;&gt;Example (BOSH -&amp;gt; Native)&lt;/h3&gt;

&lt;p&gt;an Eirini Helm Chart&lt;/p&gt;

&lt;p&gt;The OPI process of Eirini required the NATS password and IP.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;...&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;template&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;quarks.cloudfoundry.org/deployment&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{{&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;.Values.deploymentName&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;}}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;quarks.cloudfoundry.org/consumes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[{&amp;#34;name&amp;#34;:&amp;#34;nats&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;nats&amp;#34;}]&amp;#39;&lt;/span&gt;`&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and a CF-Deployment with Operator, which has the following instance groups:
- API
- Diego Cell
- Gorouter
- NATS
  &lt;code&gt;provides: nats&lt;/code&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Process Control</title>
      <link>https://quarks.suse.dev/docs/features/process_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/process_control/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;background-motivation&#34;&gt;Background &amp;amp; Motivation&lt;/h2&gt;

&lt;p&gt;Before &lt;code&gt;kubecf&lt;/code&gt; the processes of the jobs in an instance group were
managed by &lt;code&gt;monit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This allowed a human operator to suspend (kill) and later restart
these processes as a means of preventing them from interfering with
low-level operations like restoring a cluster using raw database
backups, and the like. Such suspensions were also not visible at kube
level as the pod and container kept running, except through live- and
readiness-probes.&lt;/p&gt;

&lt;p&gt;The process control features added to the &lt;code&gt;containerun&lt;/code&gt; helper
application of the operator serve the same purpose.&lt;/p&gt;

&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;

&lt;p&gt;The process control features of &lt;code&gt;containerrun&lt;/code&gt; are accessible through
an unix domain &lt;strong&gt;datagram&lt;/strong&gt; socket at location
&lt;code&gt;/var/vcap/data/&lt;/code&gt;&lt;strong&gt;JOB&lt;/strong&gt;&lt;code&gt;/&lt;/code&gt;&lt;strong&gt;PROCESS&lt;/strong&gt;&lt;code&gt;_containerrun.sock&lt;/code&gt; in the
container. Due to this placement the feature is not accessible from
outside a cluster. An operator (or script written by such) has to log
into the relevant container(s) to use the feature.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Suspending the monitored child processes is done by sending the
command &lt;code&gt;STOP&lt;/code&gt; to this socket.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversely, restarting the child processes is done by sending the
command &lt;code&gt;START&lt;/code&gt; to this socket.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sending a &lt;code&gt;START&lt;/code&gt; command when the child processes are running has
no effect. Conversely the same is true for sending a &lt;code&gt;STOP&lt;/code&gt;
command when the child processes are suspended already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Any other command sent to the socket is ignored.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any tool able to send datagram packet to a unix domain socket of that
type should work.&lt;/p&gt;

&lt;p&gt;Examples using &lt;code&gt;netcat&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo START | nc -w 1 --unixsock --udp /var/vcap/data/JOB/PROCESS_containerrun.sock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo STOP  | nc -w 1 --unixsock --udp /var/vcap/data/JOB/PROCESS_containerrun.sock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that all of these sockets are placed in the volumne shared by all
container of all jobs of the instance group. It is enough to ssh into
&lt;strong&gt;one&lt;/strong&gt; of the containers to be able to send commands to &lt;strong&gt;all&lt;/strong&gt;
sockets and thus jobs.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for sock in $(find /var/vcap/dataame &#39;*_containerrun.sock&#39;)
do
    echo STOP | nc -w 1 --unixsock --udp $sock
done
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Rendering BOSH Templates</title>
      <link>https://quarks.suse.dev/docs/features/rendering_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/rendering_templates/</guid>
      <description>
        
        
        

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rendering-bosh-templates&#34;&gt;Rendering BOSH Templates&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#flow&#34;&gt;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-gathering&#34;&gt;Data Gathering&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#extract-job-spec-and-templates-from-image&#34;&gt;Extract Job Spec and Templates from Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calculation-of-required-properties-for-an-instance-group-and-bpm-info&#34;&gt;Calculation of Required Properties for an Instance Group and BPM Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run&#34;&gt;Run&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#create-quarks-statefulset-and-quarks-jobs&#34;&gt;Create QuarksStatefulSet and QuarksJobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#render-templates&#34;&gt;Render Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run-the-entrypoints&#34;&gt;Run the entrypoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#details&#34;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#services-and-dns-addresses&#34;&gt;Services and DNS Addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resolving-links&#34;&gt;Resolving Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calculating-spec-and-linkinstances&#34;&gt;Calculating spec.* and link().instances[].*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about BOSH templates on &lt;a href=&#34;https://bosh.io/docs/jobs/#templates&#34; target=&#34;_blank&#34;&gt;bosh.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;flow&#34;&gt;Flow&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/e/2PACX-1vRhPrJuMLVXNuFsym_BZdR_RCpknl1eEBwmECLmP8EJLhI4M1HISBbgfA9rfATeEgZW3hwZMPcWxjCI/pub?w=1749&amp;amp;h=1867&#34; alt=&#34;rendering-flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following points describe each process that involves working with BOSH Job Templates, from beginning to end.&lt;/p&gt;

&lt;h3 id=&#34;data-gathering&#34;&gt;Data Gathering&lt;/h3&gt;

&lt;p&gt;The Data Gathering step is run using one &lt;code&gt;QuarksJob&lt;/code&gt;, that has one pod with multiple containers.&lt;/p&gt;

&lt;h4 id=&#34;extract-job-spec-and-templates-from-image&#34;&gt;Extract Job Spec and Templates from Image&lt;/h4&gt;

&lt;p&gt;This happens in one init container for each release present in the deployment manifest.&lt;/p&gt;

&lt;p&gt;The entrypoint of that init container is responsible with copying the contents of &lt;code&gt;/var/vcap/jobs-src&lt;/code&gt; to a shared directory, where other containers can access it.
This shared directory is &lt;code&gt;/var/vcap/all-releases/jobs-src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each init container uses the release&amp;rsquo;s docker image.&lt;/p&gt;

&lt;h4 id=&#34;calculation-of-required-properties-for-an-instance-group-and-bpm-info&#34;&gt;Calculation of Required Properties for an Instance Group and BPM Info&lt;/h4&gt;

&lt;p&gt;The main purpose of the data gathering phase is to compile all information required for all templates to be rendered and for all instance groups to be run:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;properties&lt;/li&gt;
&lt;li&gt;link instances&lt;/li&gt;
&lt;li&gt;bpm yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two containers are run for each instance group in the deployment manifest, using the image of the CF Operator. These two containers write the following on to a file &lt;code&gt;output.json&lt;/code&gt; in the volume mount &lt;code&gt;/mnt/quarks&lt;/code&gt; of the container :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;code&gt;Secret&lt;/code&gt; named &lt;code&gt;ig-resolved.&amp;lt;instance-group&amp;gt;-v&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the &amp;ldquo;Resolved Instance Group Properties&amp;rdquo; yaml file.
It contains a deployment manifest structure that only has information pertinent to an instance group.
It includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all job properties for that instance group&lt;/li&gt;
&lt;li&gt;all properties for all jobs that are link providers to any of the jobs of that instance group&lt;/li&gt;
&lt;li&gt;the rendered contents of each &lt;code&gt;bpm.yml.erb&lt;/code&gt;, for each job in the instance group&lt;/li&gt;
&lt;li&gt;link instance specs for all AZs and replicas; read more about instance keys available for links &lt;a href=&#34;https://bosh.io/docs/links/#templates&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Link instance specs are stored in the &lt;code&gt;quarks&lt;/code&gt; property key for each job in the instance group.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a &lt;code&gt;Secret&lt;/code&gt; named &lt;code&gt;bpm.&amp;lt;instance-group&amp;gt;-v&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once all properties and link instances are compiled, &lt;code&gt;bpm.yml.erb&lt;/code&gt; can be rendered for each job and for each AZ and replica of the instance group.&lt;/p&gt;

&lt;p&gt;The output of this container is the &amp;ldquo;BPM Info&amp;rdquo; yaml file.
It contains a deployment manifest structure that only has information pertinent to an instance group.
It includes the rendered contents of each &lt;code&gt;bpm.yml.erb&lt;/code&gt;, for each job in the instance group.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The BPM information is stored under the &lt;code&gt;quarks&lt;/code&gt; property, for each BOSH Job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because container entrypoints in Kubernetes cannot be different among the replicas of a Pod, we don&amp;rsquo;t support the usage of things like &lt;code&gt;spec.index&lt;/code&gt; in the ERB template of &lt;code&gt;bpm.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;run&#34;&gt;Run&lt;/h3&gt;

&lt;h4 id=&#34;create-quarksstatefulset-and-quarksjobs&#34;&gt;Create QuarksStatefulSet and QuarksJobs&lt;/h4&gt;

&lt;p&gt;The operator creates definitions for &lt;code&gt;QuarksStatefulSets&lt;/code&gt; (for &lt;strong&gt;BOSH Services&lt;/strong&gt;) or &lt;code&gt;QuarksJobs&lt;/code&gt; (for &lt;strong&gt;BOSH Errands&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;These have the following init containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;one for each unique release in the instance group - used for copying release job specs and templates; these use the release image&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;one init container that performs ERB rendering; this runs using the CF Operator image&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;render-templates&#34;&gt;Render Templates&lt;/h4&gt;

&lt;p&gt;Init containers copy the templates of the releases to &lt;code&gt;/var/vcap/all-releases&lt;/code&gt;, which is a shared directory among all containers.&lt;/p&gt;

&lt;p&gt;Another init container is run using the operator&amp;rsquo;s image, for rendering all templates. It mounts the &amp;ldquo;Resolved Instance Group Properties&amp;rdquo; &lt;code&gt;Secret&lt;/code&gt; (generated in the &lt;a href=&#34;#data-gathering&#34;&gt;data gathering step&lt;/a&gt;) and performs ERB rendering.
It&amp;rsquo;s also configured with the following environment variables, to facilitate BOSH &lt;code&gt;spec.*&lt;/code&gt; property keys:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSTANCE_GROUP_NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AZ_INDEX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REPLICAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;run-the-entrypoints&#34;&gt;Run the entrypoints&lt;/h4&gt;

&lt;p&gt;Once all the init containers are done, all control scripts and configuration files are available on disk, the BOSH Job containers can start.
Their entrypoints, env vars, capabilities, etc. are set based on &lt;a href=&#34;https://bosh.io/docs/bpm/config/#process-schema&#34; target=&#34;_blank&#34;&gt;BPM information&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;details&#34;&gt;Details&lt;/h2&gt;

&lt;p&gt;The following section describes specific implementation details for algorithms required in the rendering process.&lt;/p&gt;

&lt;h3 id=&#34;services-and-dns-addresses&#34;&gt;Services and DNS Addresses&lt;/h3&gt;

&lt;p&gt;DNS Addresses for instance groups are calculated in the following manner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;DEPLOYMENT_NAME&amp;gt;-&amp;lt;INSTANCE_GROUP_NAME&amp;gt;-&amp;lt;INDEX&amp;gt;.&amp;lt;KUBE_NAMESPACE&amp;gt;.&amp;lt;KUBE_SERVICE_DOMAIN&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;INDEX&lt;/code&gt; is calculated using the following formula:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;(AZ_INDEX - 1) * REPLICAS + POD_ORDINAL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order for things to work correctly across versions and AZs, we need &lt;a href=&#34;https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#using-stable-network-identities&#34; target=&#34;_blank&#34;&gt;ClusterIP &lt;code&gt;Services&lt;/code&gt;&lt;/a&gt; that select for Instance Group &lt;code&gt;Pods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, assuming a &lt;code&gt;REPLICAS&lt;/code&gt; of &lt;code&gt;3&lt;/code&gt; and an &lt;code&gt;AZ_COUNT&lt;/code&gt; of &lt;code&gt;2&lt;/code&gt; for a &amp;ldquo;nats&amp;rdquo; &lt;code&gt;BOSHDeployment&lt;/code&gt;, with &lt;code&gt;2&lt;/code&gt; &lt;code&gt;StatefulSet&lt;/code&gt; versions available, we would see the following &lt;code&gt;Services&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;nats-0
  selects pod z0-v1-0
  selects pod z0-v2-0
nats-1
  selects pod z1-v1-0
  selects pod z1-v2-0
nats-2
  selects pod z0-v1-1
  selects pod z0-v2-1
nats-3
  selects pod z1-v1-1
  selects pod z1-v2-1
nats-4
  selects pod z0-v1-2
  selects pod z0-v2-2
nats-5
  selects pod z1-v1-2
  selects pod z1-v2-2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;resolving-links&#34;&gt;Resolving Links&lt;/h3&gt;

&lt;p&gt;The following steps describe how to resolve links assuming all information is available. The actual implementation transforms data and stores it in between steps, but the outcome is the same.&lt;/p&gt;

&lt;p&gt;To resolve a link, the following steps are performed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vocabulary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;current job&lt;/code&gt; - the job for which rendering is happening&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desired manifest&lt;/code&gt; - the deployment manifest used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;provider job&lt;/code&gt; - the job that has been identified to be the provider for a link&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;the name and type of the link is retrieved from the spec of the &lt;code&gt;current job&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the name of the link is looked up in the &lt;code&gt;current job&lt;/code&gt;&amp;rsquo;s instance group &lt;code&gt;consumes&lt;/code&gt; key (an explicit link definition); if found and is set to &lt;code&gt;nil&lt;/code&gt;, nil is returned and resolving is complete&lt;/li&gt;
&lt;li&gt;if the link&amp;rsquo;s name has been overridden by an explicit link definition in the &lt;code&gt;desired manifest&lt;/code&gt;, the &lt;code&gt;desired manifest&lt;/code&gt; is searched for a corresponding job, that has the same name; if found, the link is populated with the properties of the &lt;code&gt;provider job&lt;/code&gt;; first, the defaults for the exposed properties (defined in the &lt;code&gt;provides&lt;/code&gt; section of the spec of the &lt;code&gt;provider job&lt;/code&gt;) are set to the defaults from the spec, and then the properties from the &lt;code&gt;desired manifest&lt;/code&gt; are applied on top&lt;/li&gt;
&lt;li&gt;if there was no explicit override, we search for a job in all the releases, that provides a link with the same &lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more about links &lt;a href=&#34;https://bosh.io/docs/links&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;calculating-spec-and-link-instances&#34;&gt;Calculating spec.* and link().instances[].*&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;spec&lt;/code&gt; of each job instance can be calculated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;name&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;of&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;the&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;instance&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;group&amp;gt;-&amp;lt;name&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;of&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;the&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;job&amp;gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;index&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;(&amp;lt;az&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;index&amp;gt;-&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;*&amp;lt;replicas&amp;gt;+&amp;lt;pod_ordinal&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;az&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;BOSH_AZ_INDEX&amp;gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;id&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;name&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;of&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;the&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;instance&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;group&amp;gt;-&amp;lt;index&amp;gt;-&amp;lt;name&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;of&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;the&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;job&amp;gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;address&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;calculated&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;address&amp;gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;bootstrap&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&amp;lt;index&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;==&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why render BPM separately from all other BOSH Job Templates?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we need information from BPM to actually know what to run.
  Without that, we don&amp;rsquo;t have an entrypoint, env vars, etc. - so we can&amp;rsquo;t create a pod and containers for the BOSH Job.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why run all release images for &lt;strong&gt;Data Gathering&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to run everything all at once because of links. The only way to resolve them is to have all the BOSH Job specs available in one spot.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is everything supported in templates, just like BOSH?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should, yes. All features should work the same (that&amp;rsquo;s the goal).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Known Exceptions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of &lt;code&gt;spec.ip&lt;/code&gt; in &lt;code&gt;bpm.yml.erb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;code&gt;bpm.yml&lt;/code&gt; is rendered before the actual instance group runs, in a different pod, &lt;code&gt;spec.ip&lt;/code&gt; is invalid.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of &lt;code&gt;spec.index&lt;/code&gt; in &lt;code&gt;bpm.yml.erb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any BPM information that is different for each replica, cannot be supported by the CF Operator, because all &lt;code&gt;Pod&lt;/code&gt; replicas are identical by definition.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Service wait for Kubernetes native pods</title>
      <link>https://quarks.suse.dev/docs/features/waiting_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/features/waiting_services/</guid>
      <description>
        
        
        &lt;p&gt;To support clean deployments and correct depedency management, the quarks-operator allows a Kubernetes &lt;code&gt;Pod&lt;/code&gt; to wait until one (or more) &lt;code&gt;Service&lt;/code&gt; is available.&lt;/p&gt;

&lt;p&gt;The operator does that by injecting an &lt;code&gt;InitContainer&lt;/code&gt; which waits for the service to be up.&lt;/p&gt;

&lt;p&gt;This is a generalization of the serialization hints natively available to all BOSH deployments.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Pod&lt;/code&gt;s needs to have the &lt;code&gt;quarks.cloudfoundry.org/wait-for&lt;/code&gt; annotation, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Pod&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;annotations&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;     &lt;/span&gt;quarks.cloudfoundry.org/wait-for&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[ &amp;#34;nats-headless&amp;#34; , &amp;#34;nginx&amp;#34; ]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At the ops level this is achieved by an instruction like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;replace&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;path&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/instance_groups/name=THE_INSTANCE_GROUP/env&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;?&lt;/span&gt;/bosh/agent/settings/annotations/quarks.cloudfoundry.org~1wait-for&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[ &amp;#34;uaa&amp;#34; ]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;The &lt;code&gt;env/bosh/agent/settings/annotations&lt;/code&gt; key is a hash used by the operator to add additional annotations to the k8s objects it creates for an instance group. IOW they are applied to the generated &lt;code&gt;quarks-statefulset&lt;/code&gt;, &lt;code&gt;statefulset&lt;/code&gt;, and &lt;code&gt;pod&lt;/code&gt;.&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;:warning: Note that while the dependency information is ultimately processed as a json array of strings, at the level of the annotations it has to be specified as a plain string. Just one which contains proper json syntax.&lt;/p&gt;

&lt;p&gt;If full custom dependencies are not required, just (partial) serial startup of instance groups (in the order of their specification in their deployment) then the native serialization hints are likely good enough.&lt;/p&gt;

&lt;p&gt;They are specified via a construction of the form&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;instance_groups&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;THE_INSTANCE_GROUP&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;update&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;serial&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in the BOSH deployment, if under direct control, or via an ops file like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;replace&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;path&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/instance_groups/name=THE_INSTANCE_GROUP/update/serial&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;value&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if the deployment cannot be modified directly.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
