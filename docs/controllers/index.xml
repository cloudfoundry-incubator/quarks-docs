<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quarks project – Kubernetes Controllers</title>
    <link>https://quarks.suse.dev/docs/controllers/</link>
    <description>Recent content in Kubernetes Controllers on Quarks project</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://quarks.suse.dev/docs/controllers/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Bosh Deployment</title>
      <link>https://quarks.suse.dev/docs/controllers/bosh_deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/controllers/bosh_deployment/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;boshdeployment&#34;&gt;BOSHDeployment&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#boshdeployment&#34;&gt;BOSHDeployment&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bdpl-component&#34;&gt;BDPL Component&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#boshdeployment-controller&#34;&gt;BOSHDeployment Controller&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#watches-in-bdpl-controller&#34;&gt;Watches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconciliation-in-bdpl-controller&#34;&gt;Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#highlights-in-bdpl-controller&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generate-variables-controller&#34;&gt;Generate Variables Controller&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#watches-in-gv-controller&#34;&gt;Watches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconciliation-in-gv-controller&#34;&gt;Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#highlights-in-gv-controller&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bpm-controller&#34;&gt;BPM Controller&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#watches-in-bpm-controller&#34;&gt;Watches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconciliation-in-bpm-controller&#34;&gt;Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#highlights-in-bpm-controller&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bdpl-abstract-view&#34;&gt;BDPL Abstract view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boshdeployment-resource-examples&#34;&gt;BOSHDeployment resource examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[BOSHDeployment status][#boshdeployment-status]&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;A BOSH deployment is created from a deployment manifest and optionally ops files.&lt;/p&gt;

&lt;p&gt;The deployment manifest is based on a vanilla BOSH deployment manifest.
The ops files modify the deployment manifest. For example, ops files can be used to replace release tarballs with &lt;a href=&#34;https://ci.flintstone.cf.cloud.ibm.com/teams/containerization/pipelines/release-images&#34; target=&#34;_blank&#34;&gt;docker images&lt;/a&gt;, thus enabling deployment on Kubernetes.&lt;/p&gt;

&lt;p&gt;A deployment is represented by the &lt;code&gt;boshdeployments.quarks.cloudfoundry.org&lt;/code&gt; (&lt;code&gt;bdpl&lt;/code&gt;) custom resource, defined in &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/crds/quarks_v1alpha1_boshdeployment_crd.yaml&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;boshdeployment_crd.yaml&lt;/code&gt;&lt;/a&gt;.
This &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/bosh-deployment/boshdeployment.yaml&#34; target=&#34;_blank&#34;&gt;bdpl custom resource&lt;/a&gt; contains references to config maps or secrets containing the actual manifests content.&lt;/p&gt;

&lt;p&gt;The name of the &lt;code&gt;bdpl&lt;/code&gt; resource is the &lt;a href=&#34;https://bosh.io/docs/manifest-v2/#deployment&#34; target=&#34;_blank&#34;&gt;deployment name&lt;/a&gt;. The name in the BOSH manifest is ignored.&lt;/p&gt;

&lt;p&gt;After creating the &lt;code&gt;bdpl&lt;/code&gt; resource on Kubernetes, i.e. via &lt;code&gt;kubectl apply&lt;/code&gt;, the CF operator will start reconciliation, which will eventually result in the deployment
of the BOSH release on Kubernetes.&lt;/p&gt;

&lt;h2 id=&#34;bdpl-component&#34;&gt;BDPL Component&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;BOSHDeployment&lt;/strong&gt; component is a categorization of a set of controllers, under the same group. Inside the &lt;strong&gt;BDPL&lt;/strong&gt; component we have a set of 3 controllers together with one separate reconciliation loop per controller to deal with &lt;code&gt;BOSH deployments&lt;/code&gt;(end user input)&lt;/p&gt;

&lt;p&gt;Figure 1 is a &lt;strong&gt;BDPL&lt;/strong&gt; component diagram that covers the set of controllers it uses and their relationship with other components(e.g. &lt;code&gt;QuarksJob&lt;/code&gt;, &lt;code&gt;QuarksSecret&lt;/code&gt; and &lt;code&gt;QuarksStatefulSet&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_bdplcomponent_flow.png&#34; alt=&#34;bdpl-component-flow&#34; /&gt;
&lt;em&gt;Fig. 1: The BOSHDeployment component&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 1 illustrates a couple of things. Firstly, at the very top, we have the &lt;code&gt;cf-operator&lt;/code&gt; , which is a long running application with a namespaced scope. When the &lt;code&gt;cf-operator&lt;/code&gt; pod is initialized it will automatically register all controllers with the &lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/&#34; target=&#34;_blank&#34;&gt;Kubernetes Controller Manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While at a first glance the above diagram looks complex, it can be explained easily by focusing on each controller´s main functions: &lt;code&gt;Reconciliation &amp;amp; Watch&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;boshdeployment-controller&#34;&gt;&lt;strong&gt;&lt;em&gt;BOSHDeployment Controller&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_bdplcontroller_flow.png&#34; alt=&#34;bdpl-controller-flow&#34; /&gt;
&lt;em&gt;Fig. 2: The BOSHDeployment controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the controller that manages the end user input(a BOSH manifest).&lt;/p&gt;

&lt;h4 id=&#34;watches-in-bdpl-controller&#34;&gt;Watches in BDPL controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BOSHDeployment&lt;/code&gt;: Create&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConfigMaps&lt;/code&gt;: Update&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secrets&lt;/code&gt;: Create and Update&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-bdpl-controller&#34;&gt;Reconciliation in BDPL controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;generates &lt;code&gt;.with-ops&lt;/code&gt; secret, that contains the deployment manifest, with all ops files applied&lt;/li&gt;
&lt;li&gt;generates &lt;code&gt;variable interpolation&lt;/code&gt; &lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-job/tree/master/README.md#one-off-jobs-auto-errands&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;QuarksJob&lt;/strong&gt;&lt;/a&gt; resource&lt;/li&gt;
&lt;li&gt;generates &lt;code&gt;data gathering&lt;/code&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt; resource&lt;/li&gt;
&lt;li&gt;generates &lt;code&gt;BPM configuration&lt;/code&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt; resource&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;highlights-in-bdpl-controller&#34;&gt;Highlights in BDPL controller&lt;/h4&gt;

&lt;p&gt;Transform the concepts of BOSH into Kubernetes resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BOSH &lt;code&gt;errands&lt;/code&gt; to &lt;code&gt;QuarksJob&lt;/code&gt; CRD instances&lt;/li&gt;
&lt;li&gt;BOSH &lt;code&gt;instance_groups&lt;/code&gt; to &lt;code&gt;QuarksStatefulSet&lt;/code&gt; CRD instances&lt;/li&gt;
&lt;li&gt;BOSH &lt;code&gt;variables&lt;/code&gt; to &lt;code&gt;QuarksSecret&lt;/code&gt; CRD instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the three created &lt;em&gt;QuarksJob&lt;/em&gt; instances will eventually persist their STDOUT into new secrets under the same namespace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The output of the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/commands/cf-operator_util_variable-interpolation.md&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;variable interpolation&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt; ends up as the &lt;code&gt;.desired-manifest-v1&lt;/code&gt; &lt;strong&gt;secret&lt;/strong&gt;, which is a versioned secret. At the same time this secret serves as the input for the &lt;code&gt;data gathering&lt;/code&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The output of the &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/commands/cf-operator_util_instance-group.md&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;data gathering&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt;, ends up
as the &lt;code&gt;.ig-resolved.&amp;lt;instance_group_name&amp;gt;-v1&lt;/code&gt; versioned secret.&lt;/li&gt;
&lt;li&gt;The output of the &lt;code&gt;BPM configuration&lt;/code&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt;, ends up as the &lt;code&gt;bpm.&amp;lt;instance_group_name&amp;gt;-v1&lt;/code&gt; versioned secret.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;generate-variables-controller&#34;&gt;&lt;strong&gt;&lt;em&gt;Generate Variables Controller&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_gvariablecontroller_flow.png&#34; alt=&#34;quarks_gvariablecontroller_flow.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fig. 3: The Generated Variables controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the controller that is responsible for auto-generating certificates, passwords and other secrets declared in the manifest. In other words, it translates all BOSH variables into custom Kubernetes primitive resources. It does this with the help of &lt;code&gt;QuarksSecrets&lt;/code&gt;. It watches the &lt;code&gt;.with-ops&lt;/code&gt; secret, retrieves the list of BOSH variables and triggers the generation of &lt;code&gt;QuarksSecrets&lt;/code&gt; per item in that list.&lt;/p&gt;

&lt;h4 id=&#34;watches-in-gv-controller&#34;&gt;Watches in GV controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Secrets&lt;/code&gt;: Create and Update.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-gv-controller&#34;&gt;Reconciliation in GV controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;generates &lt;code&gt;QuarksSecrets&lt;/code&gt; resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;highlights-in-gv-controller&#34;&gt;Highlights in GV controller&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;secrets&lt;/code&gt; resources,  generated by these &lt;code&gt;QuarksSecrets&lt;/code&gt; are referenced by the &lt;code&gt;variable interpolation&lt;/code&gt; &lt;strong&gt;QuarksJob&lt;/strong&gt;. When these secrets are created/updated, the variable interpolation QuarksJob is run.&lt;/p&gt;

&lt;h3 id=&#34;bpm-controller&#34;&gt;&lt;strong&gt;&lt;em&gt;BPM Controller&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_bpm-controller_flow.png&#34; alt=&#34;bpm-controller-flow&#34; /&gt;
&lt;em&gt;Fig. 4: The BPM controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The BPM controller has the responsibility to generate Kubernetes resources per &lt;code&gt;instance_group&lt;/code&gt;. It is triggered for each &lt;code&gt;instance_group&lt;/code&gt; in the desired manifest, since we generate one BPM Secret for each. The reconciler starts each &lt;code&gt;instance_group&lt;/code&gt; as its corresponding secret is created. It &lt;em&gt;does not wait&lt;/em&gt; for all secrets to be ready.&lt;/p&gt;

&lt;h4 id=&#34;watches-in-bpm-controller&#34;&gt;Watches in BPM controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-job/blob/master/docs/quarksjob.md#versioned-secrets&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;versioned secrets&lt;/code&gt;&lt;/a&gt;: Create and Update.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-bpm-controller&#34;&gt;Reconciliation in BPM controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Render BPM resources per &lt;code&gt;instance_group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Convert &lt;code&gt;instance_groups&lt;/code&gt; of the type &lt;code&gt;services&lt;/code&gt; to &lt;code&gt;QuarksStafulSet&lt;/code&gt; resources.&lt;/li&gt;
&lt;li&gt;Convert &lt;code&gt;instance_groups&lt;/code&gt; of the type &lt;code&gt;errand&lt;/code&gt; to &lt;code&gt;QuarksJob&lt;/code&gt; resources.&lt;/li&gt;
&lt;li&gt;Generates Kubernetes services that will expose ports for the &lt;code&gt;instance_groups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate require PVC´s.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;highlights-in-bpm-controller&#34;&gt;Highlights in BPM controller&lt;/h4&gt;

&lt;p&gt;The &lt;strong&gt;Secrets&lt;/strong&gt; watched by the BPM Reconciler are &lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-job/blob/master/docs/quarksjob.md#versioned-secrets&#34; target=&#34;_blank&#34;&gt;Versioned Secrets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Resources are &lt;em&gt;applied&lt;/em&gt; using an &lt;strong&gt;upsert technique&lt;/strong&gt; &lt;a href=&#34;https://godoc.org/sigs.k8s.io/controller-runtime/pkg/controller/controllerutil#CreateOrUpdate&#34; target=&#34;_blank&#34;&gt;implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any resources that are no longer required are deleted.&lt;/p&gt;

&lt;p&gt;As the &lt;code&gt;BOSHDeployment&lt;/code&gt; is deleted, all owned resources are automatically deleted in a cascading fashion.&lt;/p&gt;

&lt;p&gt;Persistent volumes are left behind.&lt;/p&gt;

&lt;h2 id=&#34;bdpl-abstract-view&#34;&gt;BDPL Abstract view&lt;/h2&gt;

&lt;p&gt;Figure 5 is a diagram that explains the whole &lt;code&gt;BOSHDeployment&lt;/code&gt; component controllers flow, in a more high level perspective.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.google.com/drawings/d/e/2PACX-1vTsCO5USd8AJIk_uHMRKl0NABuW85uVGJNebNvgI0Hz_9jhle6fcynLTcHh8cxW6lMgaV_DWyPEvm2-/pub?w=3161&amp;amp;h=2376&#34; alt=&#34;deployment-state&#34; /&gt;
&lt;a href=&#34;https://docs.google.com/drawings/d/126ExNqPxDg1LcB14pbtS5S-iJzLYPyXZ5Jr9vTfFqXA/edit?usp=sharing&#34; target=&#34;_blank&#34;&gt;edit&lt;/a&gt;
&lt;em&gt;Fig. 5: The BOSHDeployment component controllers interactions&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;boshdeployment-resource-examples&#34;&gt;BOSHDeployment resource examples&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/bosh-deployment&#34; target=&#34;_blank&#34;&gt;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/bosh-deployment&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;boshdeployment-status&#34;&gt;BOSHDeployment status&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;BOSHDeployment&lt;/code&gt; status is resolved by a &lt;a href=&#34;https://github.com/cloudfoundry-incubator/quarks-operator/blob/c6480811376faf81d6edadb62fcd0c7951e173c1/pkg/kube/controllers/boshdeployment/status_reconciler.go&#34; target=&#34;_blank&#34;&gt;separate controller&lt;/a&gt; which tracks the status of &lt;code&gt;QuarksJob&lt;/code&gt; and &lt;code&gt;QuarksStatefulSet&lt;/code&gt; associated with a deployment.
The controller annotates the instance groups and the jobs counters and it resolves the BDPL State (&lt;code&gt;Deployed&lt;/code&gt;, &lt;code&gt;Converting&lt;/code&gt; , &lt;code&gt;Resolving&lt;/code&gt;) by looking at the associated resources states and computing the overall state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;BOSHDeployment&lt;/code&gt; status spec is composed of the following fields:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// BOSHDeploymentStatus defines the observed state of BOSHDeployment
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BOSHDeploymentStatus&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Timestamp for the last reconcile
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000&#34;&gt;LastReconcile&lt;/span&gt;          &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;metav1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;lastReconcile&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;State&lt;/span&gt;                  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;       &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;state&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Message&lt;/span&gt;                &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;       &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;message&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;TotalJobCount&lt;/span&gt;          &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;totalJobCount&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;CompletedJobCount&lt;/span&gt;      &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;completedJobCount&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;TotalInstanceGroups&lt;/span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;totalInstanceGroups&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;DeployedInstanceGroups&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;          &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;deployedInstanceGroups&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;StateTimestamp&lt;/span&gt;         &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;metav1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Time&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;stateTimestamp&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;BOSHDeployment&lt;/code&gt; States can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Created&lt;/li&gt;
&lt;li&gt;Converting to Kubernetes Resources&lt;/li&gt;
&lt;li&gt;Resolving Manifest&lt;/li&gt;
&lt;li&gt;Deployed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where &amp;ldquo;Deployed&amp;rdquo; is the final state. Note that during deployments, the lifecycle might vary if the same resources are updated subsequently: the status of a &lt;code&gt;BOSHDeployment&lt;/code&gt; may go back from &lt;code&gt;Deployed&lt;/code&gt; to &lt;code&gt;Converting&lt;/code&gt; and &lt;code&gt;Resolving&lt;/code&gt; again if updates to the manifest are triggered.&lt;/p&gt;

&lt;p&gt;The Reconcile resolves to the Deployed state by looking at the overall counts of &lt;code&gt;QuarksJobs&lt;/code&gt; and &lt;code&gt;QuarksStatefulSet&lt;/code&gt; associated to the &lt;code&gt;BOSHDeployment&lt;/code&gt; and its state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Converting&lt;/code&gt;: All &lt;code&gt;QuarksJobs&lt;/code&gt; belonging to a &lt;code&gt;BOSHDeployment&lt;/code&gt; are completed, but &lt;code&gt;QuarksStatefulSet&lt;/code&gt; aren&amp;rsquo;t ready yet ( or either way around )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Resolving&lt;/code&gt;: &lt;code&gt;QuarksJobs&lt;/code&gt; belonging to a &lt;code&gt;BOSHDeployment&lt;/code&gt; aren&amp;rsquo;t completed, &lt;code&gt;QuarksStatefulSet&lt;/code&gt; aren&amp;rsquo;t ready yet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Deployed&lt;/code&gt;: All &lt;code&gt;QuarksJobs&lt;/code&gt; and &lt;code&gt;QuarksStatefulSet&lt;/code&gt; are ready/completed.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Quarks restart</title>
      <link>https://quarks.suse.dev/docs/controllers/quarks_restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/controllers/quarks_restart/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;The QuarksRestart controller is responsible for restarting kubernetes resources such as &lt;code&gt;StatefulSet&lt;/code&gt; and &lt;code&gt;Deployment&lt;/code&gt;. They are restarted whenever a secret referenced by these resources gets updated.&lt;/p&gt;

&lt;p&gt;This feature also enables updating entangled pods whenever the link secrets get updated.&lt;/p&gt;

&lt;h4 id=&#34;watches-in-quarks-restart-controller&#34;&gt;Watches in Quarks Restart Controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Secret&lt;/code&gt;: Updates for secrets that have the annotation &lt;code&gt;quarks.cloudfoundry.org/restart-on-update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-quarks-restart-controller&#34;&gt;Reconciliation in Quarks Restart Controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;adds restart annotation &lt;code&gt;quarks.cloudfoundry.org/restart&lt;/code&gt; to &lt;code&gt;StatefulSet&lt;/code&gt; or &lt;code&gt;Deployment&lt;/code&gt; as appropriate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quarksrestart-examples&#34;&gt;&lt;code&gt;QuarksRestart&lt;/code&gt; Examples&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/quarks-restart&#34; target=&#34;_blank&#34;&gt;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/quarks-restart&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Quarks StatefulSet</title>
      <link>https://quarks.suse.dev/docs/controllers/quarks_statefulset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/controllers/quarks_statefulset/</guid>
      <description>
        
        
        

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#QuarksStatefulSet&#34;&gt;QuarksStatefulSet&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#Description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quarksstatefulset-component&#34;&gt;QuarksStatefulSet Component&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#_quarksstatefulset-controller_&#34;&gt;QuarksStatefulSet Controller&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#watches-in-sts-controller&#34;&gt;Watches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reconciliation-in-sts-controller&#34;&gt;Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scaling-restrictions-not-implemented&#34;&gt;Scaling Restrictions (not implemented)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#automatic-restart-of-containers&#34;&gt;Automatic Restart of Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exposing-quarksstatefulsets-publicly&#34;&gt;Exposing QuarksStatefulSets Publicly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cluster-ip&#34;&gt;Cluster IP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#load-balancer&#34;&gt;Load Balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ingress&#34;&gt;Ingress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#extended-upgrade-support&#34;&gt;Extended Upgrade Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#detects-if-statefulset-versions-are-running&#34;&gt;Detects if StatefulSet versions are running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#az-support&#34;&gt;AZ Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tolerations&#34;&gt;Tolerations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quarksstatefulset-active-passive-controller&#34;&gt;QuarksStatefulSet Active-Passive Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relationship-with-the-bdpl-component&#34;&gt;Relationship with the BPM component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#`quarks-statefulset`-examples&#34;&gt;&lt;code&gt;QuarksStatefulSet&lt;/code&gt; Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;The QuarksStatefulSet component can be understood as the set of controllers responsible for translating the BOSH manifest &lt;code&gt;instance_groups&lt;/code&gt; into Kubernetes resources.&lt;/p&gt;

&lt;h2 id=&#34;quarksstatefulset-component&#34;&gt;QuarksStatefulset Component&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;QuarksStatefulset&lt;/strong&gt; component is a categorization of a set of controllers, under the same group. Inside the &lt;strong&gt;QuarksStatefulset&lt;/strong&gt; component, we have a set of 2 controllers together with one separate reconciliation loop per controller.&lt;/p&gt;

&lt;p&gt;Figure 1 illustrates a &lt;strong&gt;QuarksStatefulset&lt;/strong&gt; component diagram that covers the set of controllers it uses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_estscomponent_flow.png&#34; alt=&#34;qsts-component-flow&#34; /&gt;
&lt;em&gt;Fig. 1: The QuarksStatefulset component&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;quarksstatefulset-controller&#34;&gt;&lt;strong&gt;&lt;em&gt;QuarksStatefulSet Controller&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_estscontroller_flow.png&#34; alt=&#34;qsts-controller-flow&#34; /&gt;
&lt;em&gt;Fig. 2: The QuarksStatefulset controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This controller will generate a Kubernetes statefulset for each &lt;code&gt;instance_group&lt;/code&gt; defined in the BOSH manifest. This &lt;code&gt;Statefulset&lt;/code&gt; will also include a set of Kubernetes services, so that each component can be accessed on specific ports.&lt;/p&gt;

&lt;h4 id=&#34;watches-in-sts-controller&#34;&gt;Watches in sts controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QuarksStatefulset&lt;/code&gt;: Creation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Configmaps&lt;/code&gt;: Update&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Secrets&lt;/code&gt;: Update&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-sts-controller&#34;&gt;Reconciliation in sts controller&lt;/h4&gt;

&lt;p&gt;Will generate versioned &lt;code&gt;Statefulsets&lt;/code&gt; with the required data to make all jobs of the &lt;code&gt;instance_group&lt;/code&gt; runnable.&lt;/p&gt;

&lt;h4 id=&#34;scaling-restrictions-not-implemented&#34;&gt;Scaling Restrictions (not implemented)&lt;/h4&gt;

&lt;p&gt;Ability to set restrictions on how scaling can occur: min, max, odd replicas.&lt;/p&gt;

&lt;h4 id=&#34;automatic-restart-of-containers&#34;&gt;Automatic Restart of Containers&lt;/h4&gt;

&lt;p&gt;When an env value or mount changes due to a &lt;code&gt;ConfigMap&lt;/code&gt; or &lt;code&gt;Secret&lt;/code&gt; change, containers are restarted.
The operator watches all the &lt;code&gt;ConfigMaps&lt;/code&gt; and &lt;code&gt;Secrets&lt;/code&gt; referenced by the &lt;code&gt;StatefulSet&lt;/code&gt;, and automatically performs the update, without extra workarounds.&lt;/p&gt;

&lt;h4 id=&#34;exposing-quarksstatefulsets-publicly&#34;&gt;Exposing QuarksStatefulSets Publicly&lt;/h4&gt;

&lt;p&gt;Exposing &lt;code&gt;quarksstatefulsets&lt;/code&gt; is similar to exposing &lt;code&gt;statefulsets&lt;/code&gt; in kubernetes. A Kubernetes service makes use of labels to select the pods which should be in the service. We need to use two labels to group the pods of a single instance group.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;quarks.cloudfoundry.org/instance-group-name: ((instanceGroupName))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quarks.cloudfoundry.org/deployment-name: ((deploymentName))&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;cluster-ip&#34;&gt;Cluster IP&lt;/h4&gt;

&lt;p&gt;Following is the example which creates a service with type &lt;strong&gt;ClusterIP&lt;/strong&gt; for a single instance group named &lt;code&gt;nats&lt;/code&gt; in deployment &lt;code&gt;nats-deployment&lt;/code&gt; for exposing port 4222.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Service&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats-service&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ClusterIP&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;selector&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/instance-group-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;quarks.cloudfoundry.org/deployment-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;nats-deployment&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;ports&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;protocol&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;TCP&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;port&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;targetPort&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4222&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Complete example can be found &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/bosh-deployment/boshdeployment-with-service.yaml&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though, by default, quarks creates three services of type &lt;strong&gt;ClusterIP&lt;/strong&gt; as defined &lt;a href=&#34;../../core-tasks/from_bosh_to_kube/#naming-conventions&#34;&gt;here&lt;/a&gt; for any instance group.&lt;/p&gt;

&lt;h4 id=&#34;load-balancer&#34;&gt;Load Balancer&lt;/h4&gt;

&lt;p&gt;For creating a service type &lt;strong&gt;LoadBalancer&lt;/strong&gt;, we just need to change the &lt;code&gt;.spec.type&lt;/code&gt; to &lt;code&gt;LoadBalancer&lt;/code&gt; in the above example. The LoadBalancer Ingress is your public IP specified in the output of this command &lt;code&gt;kubectl describe service nats-service&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;ingress&#34;&gt;Ingress&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Ingress&lt;/strong&gt; doesn&amp;rsquo;t use any labels but just sits on top of services and acts as a smart router. You can create services of different types based on the above examples and use them as values in the ingress Kubernetes spec. An example of Ingress can be found &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/#create-an-ingress-resource&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information about Kubernetes services, we recommend you to read &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;extended-upgrade-support&#34;&gt;Extended Upgrade Support&lt;/h4&gt;

&lt;p&gt;When an update needs to happen, a second &lt;code&gt;StatefulSet&lt;/code&gt; for the new version is deployed, and both coexist until canary conditions are met.&lt;/p&gt;

&lt;p&gt;Annotated with a version (auto-incremented on each update). The annotation key is &lt;code&gt;quarks.cloudfoundry.org/version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ability to upgrade even though &lt;code&gt;StatefulSet&lt;/code&gt; pods are not ready.&lt;/p&gt;

&lt;h4 id=&#34;detects-if-statefulset-versions-are-running&#34;&gt;Detects if StatefulSet versions are running&lt;/h4&gt;

&lt;p&gt;During upgrades, there is more than one &lt;code&gt;StatefulSet&lt;/code&gt; version for an &lt;code&gt;QuarksStatefulSet&lt;/code&gt; resource. The operator lists available versions and keeps track of which are running.&lt;/p&gt;

&lt;p&gt;A running version means that at least one pod that belongs to a &lt;code&gt;StatefulSet&lt;/code&gt; is running. When a version &lt;strong&gt;n&lt;/strong&gt; is running, any version lower than &lt;strong&gt;n&lt;/strong&gt; is deleted.&lt;/p&gt;

&lt;p&gt;The controller continues to reconcile until there&amp;rsquo;s only one version.&lt;/p&gt;

&lt;h4 id=&#34;az-support&#34;&gt;AZ Support&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;zones&lt;/code&gt; key defines the availability zones the &lt;code&gt;QuarksStatefulSet&lt;/code&gt; needs to span.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;zoneNodeLabel&lt;/code&gt; defines the node label that defines a node&amp;rsquo;s zone.
The default value for &lt;code&gt;zoneNodeLabel&lt;/code&gt; is &lt;code&gt;failure-domain.beta.kubernetes.io/zone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The example below defines an &lt;code&gt;QuarksStatefulSet&lt;/code&gt; that should be deployed in two availability zones, &lt;strong&gt;us-central1-a&lt;/strong&gt; and &lt;strong&gt;us-central1-b&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;quarks.cloudfoundry.org/v1alpha1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;QuarksStatefulSet&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;MyQuarksStatefulSet&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;zoneNodeLabel&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;failure-domain.beta.kubernetes.io/zone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;zones&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;us-central1-a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;us-central1-b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;...&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;template&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;replicas&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;QuarksStatefulSet&lt;/code&gt; controller creates one &lt;code&gt;StatefulSet&lt;/code&gt; version for each availability zone, and adds affinity information to the pods of those &lt;code&gt;StatefulSets&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;affinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;nodeAffinity&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;nodeSelectorTerms&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;matchExpressions&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;key&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;failure-domain.beta.kubernetes.io/zone&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;operator&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;In&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;values&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;us-central1-a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If zones are set for an &lt;code&gt;QuarksStatefulSet&lt;/code&gt;, the following occurs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The name of each created &lt;code&gt;StatefulSet&lt;/code&gt; is generated as &lt;code&gt;&amp;lt;quarks statefulset name&amp;gt;-z&amp;lt;index of az&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;myquarksstatefulset-z0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;StatefulSet&lt;/code&gt; and its &lt;code&gt;Pods&lt;/code&gt; are labeled with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;quarks.cloudfoundry.org/az-index&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;quarks.cloudfoundry.org/az-name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;us-central1-a&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The &lt;code&gt;StatefulSet&lt;/code&gt; and its &lt;code&gt;Pods&lt;/code&gt; are annotated with an &lt;strong&gt;ordered&lt;/strong&gt; JSON array of all the availability zones:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;quarks.cloudfoundry.org/zones&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[&amp;#34;us-central1-a&amp;#34;, &amp;#34;us-central1-b&amp;#34;]&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As defined above, each pod is modified to contain affinity rules.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Each container and init container of each pod have the following env vars set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;KUBE_AZ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;zone name&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;BOSH_AZ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;zone name&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;CF_OPERATOR_AZ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;zone name&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;AZ_INDEX&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;zone index&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;tolerations&#34;&gt;Tolerations&lt;/h5&gt;

&lt;p&gt;Taints and tolerations is a concept defined in kubernetes to repel pods from nodes &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;. Defining tolerations is same as defined in the kubernetes docs. Keep in mind the affinity rules added by the controller when az&amp;rsquo;s are defined. An example is specified in the examples folder.&lt;/p&gt;

&lt;h4 id=&#34;restarting-on-config-change&#34;&gt;Restarting on Config Change&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;QuarksStatefulSets&lt;/code&gt; can be automatically updated when the environment/mounts have changed due to a referenced
&lt;code&gt;ConfigMap&lt;/code&gt; or a &lt;code&gt;Secret&lt;/code&gt; being updated. This behavior is controlled by the &lt;code&gt;updateOnConfigChange&lt;/code&gt; flag which defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;watches-in-cleanup-controller&#34;&gt;Watches in cleanup controller&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StatefulSet&lt;/code&gt;: Creation/Update&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;reconciliation-in-cleanup-controller&#34;&gt;Reconciliation in cleanup controller&lt;/h4&gt;

&lt;p&gt;It will delete statefulsets with old versions, only after the new statefulset version instances are up and running.&lt;/p&gt;

&lt;h3 id=&#34;quarksstatefulset-active-passive-controller&#34;&gt;&lt;strong&gt;&lt;em&gt;QuarksStatefulSet Active-Passive Controller&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_estsactivepassivecontroller_flow.png&#34; alt=&#34;qsts-activepassivecontroller-flow&#34; /&gt;
&lt;em&gt;Fig. 3: The QuarksStatefulset active/passive controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Active/passive model is application model that have multiple running instances, but only one instance is active and all other instances are passive (standby). If the active instance is down, one of the passive instances will be promoted to active immediately.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;activePassiveProbes&lt;/code&gt; key defines active probe to be performed on a container. The controller examines the active probe periodically to see if the active one is still active. If active pod is down or there isn’t an active pod, the first running pod will be promoted as active and label it as &lt;code&gt;quarks.cloudfoundry.org/pod-active: active&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;apiVersion&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;quarks.cloudfoundry.org/v1alpha1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;kind&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;QuarksStatefulSet&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;metadata&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;myquarksstatefulset&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;activePassiveProbes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;busybox&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# define a active probe on the container&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;exec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;command&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/bin/sh&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;-c&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;/root/check-active.sh&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;template&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;replicas&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;template&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;spec&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;containers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;name&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;busybox&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;busybox&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;command&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;sleep&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;-&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;3600&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The controller manages this active probing and provides pod designation label to the service&amp;rsquo;s selectors. Any requests sent to the service will then only be sent to the active pod.&lt;/p&gt;

&lt;h2 id=&#34;relationship-with-the-bdpl-component&#34;&gt;Relationship with the BDPL component&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_bpm_and_ests_flow.png&#34; alt=&#34;bpm-qsts-relationship&#34; /&gt;
&lt;em&gt;Fig. 4: Relationship with the BPM controller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 4 illustrates the interaction of the &lt;strong&gt;BPM&lt;/strong&gt; Controller with the &lt;strong&gt;QuarksStatefulSet&lt;/strong&gt; Controller. Once the BPM controller consumes the data persisted in secrets from the &lt;code&gt;QuarksJob&lt;/code&gt; Component, it will use that data to generate new &lt;code&gt;QuarksStatefulset&lt;/code&gt; instances. When these resources are generated, the QuarksStatefulSet controller will be watching and trigger its reconciliation loop.&lt;/p&gt;

&lt;h2 id=&#34;quarksstatefulset-examples&#34;&gt;&lt;code&gt;QuarksStatefulSet&lt;/code&gt; Examples&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/quarks-statefulset&#34; target=&#34;_blank&#34;&gt;https://github.com/cloudfoundry-incubator/cf-operator/tree/master/docs/examples/quarks-statefulset&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: StatefulSet Rollout</title>
      <link>https://quarks.suse.dev/docs/controllers/statefulsetrollout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/controllers/statefulsetrollout/</guid>
      <description>
        
        
        

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;The former implementation use a new &lt;code&gt;StatefulSet&lt;/code&gt; for each new version of a manifest. This had the following drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update on a cluster with multiple nodes was not working. When the new pods were started on a different node, the volume was blocked by the old pod.&lt;/li&gt;
&lt;li&gt;On a single node cluster this was also not working, if the workload (e.g. mysql) was using a lock on the volume on file-system level.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-standard-k8s-statefulset-is-not-sufficient&#34;&gt;Why standard K8s StatefulSet is not sufficient&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Out-of-order updates are possible when e.g. a pod/node crashes.&lt;/li&gt;
&lt;li&gt;Recovering from a failed deployment is not possible with the standard kubernetes &lt;code&gt;StatefulSet&lt;/code&gt; controller.&lt;/li&gt;
&lt;li&gt;There is no timeout when the new deployment is rolled out and is stuck.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;statemachine&#34;&gt;Statemachine&lt;/h2&gt;

&lt;p&gt;This controller implements the following state machine&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../quarks_sts_rollout_fsm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;known-limitations&#34;&gt;Known Limitations&lt;/h3&gt;

&lt;h4 id=&#34;canaryupscale&#34;&gt;CanaryUpscale&lt;/h4&gt;

&lt;p&gt;During upscale, there is no real canary behaviour implemented.
If a &lt;code&gt;StatefulSet&lt;/code&gt; is scaled from 3 to 5 replicas, the state changes to &lt;code&gt;CanaryUpscale&lt;/code&gt; and &lt;code&gt;Partition&lt;/code&gt; is set to 2.
The k8s statefulset controller creates the 2 missing instances.
If all instances are ready the controller switches to state &lt;code&gt;Rollout&lt;/code&gt; and continues as usual.
Due to the fact that more than 1 instance might be updated in state &lt;code&gt;CanaryUpscale&lt;/code&gt;, the &lt;code&gt;update-watch-time&lt;/code&gt; is used as timeout.&lt;/p&gt;

&lt;h4 id=&#34;single-replica&#34;&gt;Single Replica&lt;/h4&gt;

&lt;p&gt;The former implementation was starting a second pod during the update before shutting down the old one.
This is no longer possible as the name of the pod won&amp;rsquo;t change and results in a downtime.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: </title>
      <link>https://quarks.suse.dev/docs/controllers/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://quarks.suse.dev/docs/controllers/readme/</guid>
      <description>
        
        
        

&lt;h1 id=&#34;kubernetes-controllers&#34;&gt;Kubernetes Controllers&lt;/h1&gt;

&lt;p&gt;This folder contains design documents for the Kubernetes controllers that make up the cf-operator.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;

&lt;p&gt;Draw.io with the sources for the &lt;code&gt;quarks_deployment_flow-*png&lt;/code&gt; controller charts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1Uk2h5pOmY-gLtbfpDNO3POTcqI5UdZgj/view?usp=sharing&#34; target=&#34;_blank&#34;&gt;https://drive.google.com/file/d/1Uk2h5pOmY-gLtbfpDNO3POTcqI5UdZgj/view?usp=sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
